"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var e,s=require("readline"),t=(e=require("yargs"))&&"object"==typeof e&&"default"in e?e.default:e,o=require("fs"),r=require("path");class i{constructor(){this.frames=["- ","\\ ","| ","/ "],this.countLines=1}log(e,s){process.stdout.write(`${this.getHeader(s)}${e}\n`),this.countLines++}error(e,s){process.stderr.write(`${this.getHeader(s)}${e}\n`),this.countLines++}updateLog(e,t){process.stdout.isTTY?(t||(t=1),s.moveCursor(process.stdout,0,-t),s.clearLine(process.stdout,0),process.stdout.write(e+"\n"),s.moveCursor(process.stdout,0,t)):process.stdout.write(e+"\n")}spinnerLogStart(e,s){const t=this.countLines;return this.log(e,s),{timer:this.spin(e,s,t),line:t}}spinnerLogStop(e,s,t){clearInterval(e.timer),this.updateLog(`${this.getHeader(t)}${s}`,this.countLines-e.line),this.cursorShow()}spin(e,s,t){if(!process.stdout.isTTY)return;let o=0;return setInterval(()=>{this.cursorHide();const r=this.frames[o=++o%this.frames.length];this.updateLog(`${this.getHeader(s)}${r}${e}`,this.countLines-t)},80)}cursorShow(){process.stdout.write("[?25h")}cursorHide(){process.stdout.write("[?25l")}getHeader(e){return e?`[${e}]: `:""}}class n{constructor(e){this.logger=e,this.supportedFlags=["--all","--files","--folders"];const s={all:{description:"Generates examples for all icons",type:"boolean"},files:{description:"Generates examples for all file icons",type:"boolean"},folders:{description:"Generates examples for all folder icons",type:"boolean"}};this.optionKeys=Object.keys(s);t.usage("Usage: $0 <flag> [space separated icon names]").options(s).group(this.optionKeys,"Flags:").alias("help","h").alias("version","V").epilogue("Providing the icon names after '--files' or '--folders',\nrestricts the examples generator to that icons only").check(e=>this.validate(e)).strict()}parse(){const e=t.argv;return{flag:this.getFlag(e),icons:e._}}validate(e){return e.all||e.files||e.folders||this.errorHandler("Missing flag argument"),this.supportedFlags.includes(process.argv[2])||this.errorHandler("Incorrect flag position"),this.confict(e,this.optionKeys[0],this.optionKeys[1]),this.confict(e,this.optionKeys[1],this.optionKeys[2]),this.confict(e,this.optionKeys[2],this.optionKeys[0]),e.all&&e._.length&&this.logger.log("Arguments after '--all' have been ignored\n"),!0}confict(e,s,t){e[s]&&e[t]&&this.errorHandler(`Flags '--${s}' and '--${t}' are mutually exclusive`)}errorHandler(e){t.showHelp(),this.logger.error(e),process.exit(1)}getFlag(e){return e.all?this.optionKeys[0]:e.files?this.optionKeys[1]:this.optionKeys[2]}}function l(e,s,t){s||(s=r.resolve()),t||(t=[]);const i=o.readdirSync(s);for(const n of i){const i=r.join(s,n);o.lstatSync(i).isDirectory()&&l(e,i,t),e instanceof RegExp?e.test(i)&&t.push(i):i.includes(e)&&t.push(i)}return t}class a{constructor(e,s,t,o){this.pargs=e,this.files=s,this.folders=t,this.logger=o,this.langIdIconsCount=0,this.unsupported=[],this.fileNames=this.getFilesCollection(),this.folderNames=this.getFoldersCollection()}generate(){const e=process.cwd();if(this.createDirectory("examples"),this.logger.log(""),"files"===this.pargs.flag){const e=this.pargs.icons.length?this.pargs.icons:Object.keys(this.fileNames);this.buildFiles(e)}if("folders"===this.pargs.flag){const e=this.pargs.icons.length?this.pargs.icons:Object.keys(this.folderNames);this.buildFolders(e)}"all"===this.pargs.flag&&(this.buildFolders(Object.keys(this.folderNames)),this.buildFiles(Object.keys(this.fileNames))),this.displayNoteFooter(),process.chdir(e)}displayNoteFooter(){const e=this.pargs.icons.filter(e=>!this.unsupported.includes(e));let s=!e.length||e.length>1,t=s?"s":"";const o="all"!==this.pargs.flag?this.pargs.flag.substring(0,this.pargs.flag.length-1):this.pargs.flag;let r=s?"were":"was";const i=this.pargs.icons.length?`${e.length?`'${e.join("', '")}'`:"zero"} ${o}`:o;if(this.logger.updateLog(`Example${t} of ${i} icon${t} ${r} successfully created!`),this.unsupported.length&&(s=!this.unsupported.length||this.unsupported.length>1,t=s?"s":"",this.logger.error(`Unsupported icon${t}: '${this.unsupported.join("', '")}'`)),this.langIdIconsCount>0){s=this.langIdIconsCount>1,t=s?"s":"",r=s?"are":"is";const e=`\nNote: Example${t} include${s?"":"s"} file icon${t} that ${r} supported via 'language id'.\n  In order to display that icon${t}, you may have to add the following snippet in your settings:\n\n  "vsicons.associations.files": [\n    { "icon": "%ICON-NAME%", "extensions":["%FILE-EXTENSION%"], "format": "%ICON-FILE-FORMAT%" }\n  ]\n\n  replacing the placeholders accordingly. For more than one icon, add their respective entries in the array.`;this.logger.log(e)}}getFilesCollection(){return this.files.supported.filter(e=>!e.disabled).reduce((e,s)=>{const t=e,o=!s.filename&&s.languages&&s.languages.length?s.languages[0].defaultExtension:s.extensions[0];return o?(t[s.icon]=`${s.filename?"":"file."}${o}`,t):t},{})}getFoldersCollection(){return this.folders.supported.filter(e=>!e.disabled).reduce((e,s)=>{const t=e;return s.extensions.length&&(t[s.icon]=s.extensions[0]),t},{})}createDirectory(e){!function e(s){o.existsSync(s)&&(o.readdirSync(s).forEach(t=>{const r=`${s}/${t}`;o.lstatSync(r).isDirectory()?e(r):o.unlinkSync(r)}),o.rmdirSync(s))}(e),o.mkdirSync(e),process.chdir(e)}buildFiles(e){e.forEach(e=>{const s=this.fileNames[e];if(!s)return void this.unsupported.push(e);const t=this.files.supported.find(s=>s.icon===e);t.languages&&t.languages.length&&this.langIdIconsCount++;try{o.writeFileSync(s,null),this.logger.updateLog(`Example file for '${e}' successfully created!`)}catch(s){this.logger.error(`Something went wrong while creating the file for '${e}' :\n${s}`)}})}buildFolders(e){e.forEach(e=>{const s=this.folderNames[e];if(s)try{o.mkdirSync(s),this.logger.updateLog(`Example folder for '${e}' successfully created!`)}catch(s){this.logger.error(`Something went wrong while creating the folder for '${e}' :\n${s}`)}else this.unsupported.push(e)})}}exports.main=function(){try{const e=new i,s=new n(e).parse(),t=function(e){let s=r.resolve();const t=r.parse(s).root;let i=!0;for(;i;){let n;try{o.accessSync(r.resolve(s,e)),n=e}catch(e){n=void 0}if(n)return i=!1,r.join(s,n);if(s===t)return i=!1,null;s=r.dirname(s)}}("vscode-icons");if(!t)throw Error("Directory 'vscode-icons' could not be found, try cloning the repository first, in the parent directory.");const c="src(?:(?:\\/|\\\\)[a-zA-Z0-9\\s_@-^!#$%&+={}\\[\\]]+)*(?:\\/|\\\\)",h=l(new RegExp(c+"supportedExtensions\\.js"),t)[0],g=l(new RegExp(c+"supportedFolders\\.js"),t)[0];if(!h||!g)throw Error("Looks like 'vscode-icons' has not been build yet, try performing a build first.");const u=require(h).extensions,d=require(g).extensions;new a(s,u,d,e).generate()}catch(e){console.error(e.message||e),process.exit(1)}};
